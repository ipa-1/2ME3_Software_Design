## @file CalcModule.py
#  @author kuber khanna
#  @brief Performs necessary operations on student data such as sorting on basis of `gpa`, `average gpa calculation` and appropriate `allocation` of students into their respective departments
#  @date 17/01/2019

from operator import itemgetter
from ReadAllocationData import *
##  @brief sort sorts student data according to their gpa in descending order
#   @param S list of student data generated by readStdnts in the format ``[{'macid': string, 'fname': string, 'lname': string, 'gender':string, 'gpa': float, 'choices': [string, string, string] , .....}]``
#   @return list1 : list of students sorted according to thier gpa where each element of the list has the form ```{'macid': string, 'fname': string, 'lname': string, 'gender':string, 'gpa': float, 'choices': [string, string, string]}```

#IMPLEMENTATION OF THIS FUNCTION IS INSPIRED FROM THE FOLLOWING LINK: https://www.geeksforgeeks.org/ways-sort-list-dictionaries-values-python-using-itemgetter/
def sort(S): 
    if S == []:
        return ("Data is empty")
    if type(S) != list:
        return("type error")
    else:
	    list1 = []
	    list1 = sorted(S, key = itemgetter('gpa') , reverse = True)
	    #print(list1)
	    return list1
## @brief average calculates average gpa of students from the student data based on their gender
#  @param L list of student data generated by readStdnts where each element of the list has the form ``{'macid': string, 'fname': string, 'lname': string, 'gender':string, 'gpa': float, 'choices': [string, string, string]}``
#  @param g gender either `male` or `female`
#  @return avg : average based on the gender
def average(L , g):
    avg=0
    if type(L) != list:
        return("type error")
        
    if g != 'male' and g != "female":
        return("incorrect arguement for g")
        
    if L == []:
        return("Data is empty")
        
    else:
	    list1 = []
	    list2 = []
	    for i in L:
		    if(i['gender'] == g):
			    list1.append(i)
			    for j in list1:
				    list2.append(j["gpa"])
			    avg=sum(list2)//len(list2)
	    #print(avg)
    return(avg)
##  @brief performs necessary operations to allocate students to their preffered department based on  their `gpa` or whether thay have `free choice`
#  @param S list of student data generated by readStdnts where each entry of the list has the form ``{'macid': string, 'fname': string, 'lname': string, 'gender':string, 'gpa': float, 'choices': [string, string, string]}``
#  @param F list of students with free choice generated by function readFreeChoice
#  @param C dictionary of the form `{department : capacity}` returned by readDeptCapacity
#  @return final_dict : dictionary  of form ```{department : [student, .... student]}``` where student is the same format returned by readStdnts
def allocate(S,F,C):
    if (S == [] or F == [] or C == {}):
        return ("Data is empty")
    if (type(S) != list or type(F)!= list or type(C)!=dict):
        return ("type error")
    else:
          final_dict = {}

          passed = []
          probation = []
        
          for x in S:
                  if x['gpa'] >= 4.0:
                          passed.append(x)
                  else:
                          probation.append(x)
                        
          sortByGPA = []
          allocated = {'engphys': [], 'software': [], 'civil': [], 'mechanical': [], 'materials': [], 'chemical': [], 'electrical': []}

          for x in passed:
                  if x['macid'] in F and C[x['choices'][0]] > 0:
                          allocated[x['choices'][0]].append(x)
                          C[x['choices'][0]] -= 1
                  else:
                          sortByGPA.append(x)
                        
          sortByGPA.sort(key=itemgetter('gpa'), reverse=True)

          deptFull = []

          for x in sortByGPA:

                  if C[x['choices'][0]] > 0:                
                          allocated[x['choices'][0]].append(x)
                          C[x['choices'][0]] -= 1
                        
                  elif C[x['choices'][1]] > 0:
                          allocated[x['choices'][1]].append(x)
                          C[x['choices'][1]] -= 1
                        
                  elif C[x['choices'][2]] > 0:
                          allocated[x['choices'][2]].append(x)
                          C[x['choices'][2]] -= 1
                  else:
                          deptFull.append(x)

        # Students Who Were Successfully Allocated To Their Choice(s)
          for x in allocated:
                #print(x)
                #print(allocated[x])
                #print()

        # Students Who Had A GPA Greater Than 4, But All Departments Were Full
        # print(deptFull)
        # print()

        # # Students With A GPA Less Than 4.0
        # print(probation)
        # print()
           final_dict = {'civil' : allocated['civil'] , 'chemical' : allocated['chemical'] , 'electrical' : allocated['electrical'] , 'mechanical' : allocated['mechanical'] , 'software' : allocated['software'] , 'materials' : allocated['materials'] , 'engphys' : allocated['engphys']}


#           print(final_dict)
           return final_dict